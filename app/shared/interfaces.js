"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Role = /** @class */ (function () {
    function Role() {
    }
    return Role;
}());
exports.Role = Role;
var DropDownValuePair = /** @class */ (function () {
    function DropDownValuePair() {
    }
    return DropDownValuePair;
}());
exports.DropDownValuePair = DropDownValuePair;
var Users = /** @class */ (function () {
    function Users() {
    }
    return Users;
}());
exports.Users = Users;
var User = /** @class */ (function () {
    function User(ID, Name) {
        this.id = ID;
        this.name = Name;
    }
    return User;
}());
exports.User = User;
/* Start for UserLogin */
var UserLogin = /** @class */ (function () {
    function UserLogin() {
    }
    return UserLogin;
}());
exports.UserLogin = UserLogin;
/* End for UserLogin */
/* Start for mycondosg homepage and properties */
var CondoInfo = /** @class */ (function () {
    function CondoInfo() {
    }
    return CondoInfo;
}());
exports.CondoInfo = CondoInfo;
// For factsheet component/ blocklayout component
var CondoInfoDetail = /** @class */ (function () {
    function CondoInfoDetail() {
    }
    return CondoInfoDetail;
}());
exports.CondoInfoDetail = CondoInfoDetail;
// For UnitCategoryName And Area(1-BedRoom: 12-sqft)
var UnitCategoryNameRangeInfo = /** @class */ (function () {
    function UnitCategoryNameRangeInfo() {
    }
    return UnitCategoryNameRangeInfo;
}());
exports.UnitCategoryNameRangeInfo = UnitCategoryNameRangeInfo;
// For Facilities by Condominium_Id
var FacilitiesInfo = /** @class */ (function () {
    function FacilitiesInfo() {
    }
    return FacilitiesInfo;
}());
exports.FacilitiesInfo = FacilitiesInfo;
// For Architecture
var CondoMaterialInfo = /** @class */ (function () {
    function CondoMaterialInfo() {
    }
    return CondoMaterialInfo;
}());
exports.CondoMaterialInfo = CondoMaterialInfo;
// For ArchitectureFiles
var MaterialFile = /** @class */ (function () {
    function MaterialFile() {
    }
    return MaterialFile;
}());
exports.MaterialFile = MaterialFile;
// For Schematic Diagram
var Block = /** @class */ (function () {
    function Block() {
    }
    return Block;
}());
exports.Block = Block;
var Stack = /** @class */ (function () {
    function Stack() {
    }
    return Stack;
}());
exports.Stack = Stack;
var Building = /** @class */ (function () {
    function Building() {
    }
    return Building;
}());
exports.Building = Building;
var Unit = /** @class */ (function () {
    function Unit() {
    }
    return Unit;
}());
exports.Unit = Unit;
//  For Block Layout Plan Files
var BlockLayoutPlanFile = /** @class */ (function () {
    function BlockLayoutPlanFile() {
    }
    return BlockLayoutPlanFile;
}());
exports.BlockLayoutPlanFile = BlockLayoutPlanFile;
var MemberInfo = /** @class */ (function () {
    function MemberInfo() {
    }
    return MemberInfo;
}());
exports.MemberInfo = MemberInfo;
/* For Common Use */
var Response = /** @class */ (function () {
    function Response() {
    }
    return Response;
}());
exports.Response = Response;
var ResponseDetail = /** @class */ (function () {
    function ResponseDetail() {
    }
    return ResponseDetail;
}());
exports.ResponseDetail = ResponseDetail;
var Return = /** @class */ (function () {
    function Return() {
    }
    return Return;
}());
exports.Return = Return;
// For Patch
var Patch = /** @class */ (function () {
    function Patch() {
    }
    return Patch;
}());
exports.Patch = Patch;
//# sourceMappingURL=data:application/json;base64,