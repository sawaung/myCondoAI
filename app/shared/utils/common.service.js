"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var CommonService = /** @class */ (function () {
    function CommonService() {
    }
    CommonService.prototype.IsAccess = function (roles, useraccess) {
        if (roles != null) {
            for (var _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
                var r = roles_1[_i];
                if (useraccess === r.Role) {
                    return true;
                }
            }
            return false;
        }
    };
    CommonService.prototype.showMessage = function (rtn, successMessage) {
        if (rtn.response.code === '200') {
            if (successMessage !== '') {
                // this.notificationService.printSuccessMessage(successMessage);
                this.openSnackBar(successMessage, '');
            }
            else {
                // this.notificationService.printSuccessMessage(rtn.response.message);
                this.openSnackBar(rtn.response.message, '');
            }
        }
        else {
            // this.notificationService.printErrorMessage(rtn.response.message);
            this.openSnackBar(rtn.response.message, '');
        }
    };
    CommonService.prototype.showMessageForFail = function (failMessage) {
        this.openSnackBar(failMessage, '');
    };
    CommonService.prototype.showMessageForSaveImageInGallery = function (message) {
        this.openSnackBar(message, '');
    };
    // Notification(Succeess/Fail)
    CommonService.prototype.openSnackBar = function (message, action) {
        // this.snackBar.open(message, action, {
        //   duration: 3000,
        // });
    };
    // Generate New GUID
    CommonService.prototype.NewGuid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
    CommonService.prototype.getLocal_From_UTCDate = function (orgDat) {
        var d = new Date();
        d.setFullYear(orgDat.getUTCFullYear());
        d.setMonth(orgDat.getUTCMonth());
        d.setDate(orgDat.getUTCDate());
        d.setHours(orgDat.getUTCHours());
        d.setMinutes(orgDat.getUTCMinutes());
        d.setSeconds(orgDat.getUTCSeconds());
        d.setMilliseconds(orgDat.getUTCMilliseconds());
        return d;
    };
    CommonService.prototype.getUTC_From_LocalDate = function (orgDat) {
        var d = new Date();
        d.setUTCFullYear(orgDat.getFullYear());
        d.setUTCMonth(orgDat.getMonth());
        d.setUTCDate(orgDat.getDate());
        d.setUTCHours(orgDat.getHours());
        d.setUTCMinutes(orgDat.getMinutes());
        d.setUTCSeconds(orgDat.getSeconds());
        d.setUTCMilliseconds(orgDat.getMilliseconds());
        return d;
    };
    CommonService.prototype.getCondoId = function () {
        return "8E3919CE-3BD8-4528-BD9A-4127AEA09414";
    };
    CommonService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CommonService);
    return CommonService;
}());
exports.CommonService = CommonService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21tb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUkzQztJQUVJO0lBQWUsQ0FBQztJQUVULGdDQUFRLEdBQWYsVUFBZ0IsS0FBYSxFQUFFLFVBQWtCO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxDQUFZLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLO2dCQUFoQixJQUFNLENBQUMsY0FBQTtnQkFDUixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtZQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNMLENBQUM7SUFFTSxtQ0FBVyxHQUFsQixVQUFtQixHQUFXLEVBQUUsY0FBc0I7UUFDbEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM5QixFQUFFLENBQUMsQ0FBQyxjQUFjLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsZ0VBQWdFO2dCQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMxQyxDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsc0VBQXNFO2dCQUN0RSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELENBQUM7UUFDTCxDQUFDO1FBQUEsSUFBSSxDQUFDLENBQUM7WUFDSCxvRUFBb0U7WUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFB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YUFBYSxDQXNGekI7SUFBRCxvQkFBQztDQUFBLEFBdEZELElBc0ZDO0FBdEZZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb2xlLCBSZXR1cm4gfSBmcm9tICcuLi8uLi9zaGFyZWQvaW50ZXJmYWNlcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb21tb25TZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgcHVibGljIElzQWNjZXNzKHJvbGVzOiBSb2xlW10sIHVzZXJhY2Nlc3M6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChyb2xlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiByb2xlcyl7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlcmFjY2VzcyA9PT0gci5Sb2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvd01lc3NhZ2UocnRuOiBSZXR1cm4sIHN1Y2Nlc3NNZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAocnRuLnJlc3BvbnNlLmNvZGUgPT09ICcyMDAnKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWNjZXNzTWVzc2FnZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5wcmludFN1Y2Nlc3NNZXNzYWdlKHN1Y2Nlc3NNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3BlblNuYWNrQmFyKHN1Y2Nlc3NNZXNzYWdlLCAnJyk7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5wcmludFN1Y2Nlc3NNZXNzYWdlKHJ0bi5yZXNwb25zZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3BlblNuYWNrQmFyKHJ0bi5yZXNwb25zZS5tZXNzYWdlLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5wcmludEVycm9yTWVzc2FnZShydG4ucmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMub3BlblNuYWNrQmFyKHJ0bi5yZXNwb25zZS5tZXNzYWdlLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93TWVzc2FnZUZvckZhaWwoZmFpbE1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub3BlblNuYWNrQmFyKGZhaWxNZXNzYWdlLCAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNob3dNZXNzYWdlRm9yU2F2ZUltYWdlSW5HYWxsZXJ5KG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub3BlblNuYWNrQmFyKG1lc3NhZ2UsICcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3RpZmljYXRpb24oU3VjY2Vlc3MvRmFpbClcclxuICAgIG9wZW5TbmFja0JhcihtZXNzYWdlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gdGhpcy5zbmFja0Jhci5vcGVuKG1lc3NhZ2UsIGFjdGlvbiwge1xyXG4gICAgICAgIC8vICAgZHVyYXRpb246IDMwMDAsXHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmF0ZSBOZXcgR1VJRFxyXG4gICAgcHVibGljIE5ld0d1aWQoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gczQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxyXG4gICAgICAgICAgICAuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArXHJcbiAgICAgICAgICBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExvY2FsX0Zyb21fVVRDRGF0ZShvcmdEYXQ6IERhdGUpOiBEYXRlIHtcclxuICAgIGxldCBkID0gbmV3IERhdGUoKTtcclxuICAgIGQuc2V0RnVsbFllYXIob3JnRGF0LmdldFVUQ0Z1bGxZZWFyKCkpO1xyXG4gICAgZC5zZXRNb250aChvcmdEYXQuZ2V0VVRDTW9udGgoKSk7XHJcbiAgICBkLnNldERhdGUob3JnRGF0LmdldFVUQ0RhdGUoKSk7XHJcbiAgICBkLnNldEhvdXJzKG9yZ0RhdC5nZXRVVENIb3VycygpKTtcclxuICAgIGQuc2V0TWludXRlcyhvcmdEYXQuZ2V0VVRDTWludXRlcygpKTtcclxuICAgIGQuc2V0U2Vjb25kcyhvcmdEYXQuZ2V0VVRDU2Vjb25kcygpKTtcclxuICAgIGQuc2V0TWlsbGlzZWNvbmRzKG9yZ0RhdC5nZXRVVENNaWxsaXNlY29uZHMoKSk7XHJcbiAgICByZXR1cm4gZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRVVENfRnJvbV9Mb2NhbERhdGUob3JnRGF0OiBEYXRlKTogRGF0ZSB7XHJcbiAgICBsZXQgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBkLnNldFVUQ0Z1bGxZZWFyKG9yZ0RhdC5nZXRGdWxsWWVhcigpKTtcclxuICAgIGQuc2V0VVRDTW9udGgob3JnRGF0LmdldE1vbnRoKCkpO1xyXG4gICAgZC5zZXRVVENEYXRlKG9yZ0RhdC5nZXREYXRlKCkpO1xyXG4gICAgZC5zZXRVVENIb3VycyhvcmdEYXQuZ2V0SG91cnMoKSk7XHJcbiAgICBkLnNldFVUQ01pbnV0ZXMob3JnRGF0LmdldE1pbnV0ZXMoKSk7XHJcbiAgICBkLnNldFVUQ1NlY29uZHMob3JnRGF0LmdldFNlY29uZHMoKSk7XHJcbiAgICBkLnNldFVUQ01pbGxpc2Vjb25kcyhvcmdEYXQuZ2V0TWlsbGlzZWNvbmRzKCkpO1xyXG4gICAgcmV0dXJuIGQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29uZG9JZCgpOmFueXtcclxuICAgICAgcmV0dXJuIFwiOEUzOTE5Q0UtM0JEOC00NTI4LUJEOUEtNDEyN0FFQTA5NDE0XCI7XHJcbiAgfVxyXG5cclxufSJdfQ==