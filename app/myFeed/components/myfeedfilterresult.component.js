"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var myfeed_model_1 = require("../model/myfeed.model");
var myfeed_service_1 = require("../services/myfeed.service");
require("nativescript-localstorage");
var globalstorage_service_1 = require("../../shared/store/globalstorage.service");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var Timer = require("tns-core-modules/timer");
var LoadingIndicator = require("nativescript-loading-indicator").LoadingIndicator;
var data_service_1 = require("../../shared/services/data.service");
var MyFeedFilterResultComponent = /** @class */ (function () {
    function MyFeedFilterResultComponent(router, route, dataService, routerExtensions, feedService, globalStorageService) {
        var _this = this;
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.routerExtensions = routerExtensions;
        this.feedService = feedService;
        this.globalStorageService = globalStorageService;
        this.isLoading = false;
        this.feedFilterInfo = new myfeed_model_1.FeedFilter();
        this.para = new myfeed_model_1.FeedFilter();
        this.newsFeedList = new observable_array_1.ObservableArray();
        MyFeedFilterResultComponent_1.myFeedFilterResultComponent = this;
        this.route.queryParams.subscribe(function (params) {
            _this.para = JSON.parse(params["FeedFilterInfo"]);
            console.log("Feed_Id " + _this.para.SearchKeyword);
        });
    }
    MyFeedFilterResultComponent_1 = MyFeedFilterResultComponent;
    MyFeedFilterResultComponent.prototype.ngOnInit = function () {
        this.initialize();
        this.loadFeedList();
    };
    MyFeedFilterResultComponent.prototype.ngAfterViewInit = function () {
        this.radListView = this.radListViewRef.nativeElement;
    };
    MyFeedFilterResultComponent.prototype.onNavBtnTap = function () {
        this.routerExtensions.backToPreviousPage();
    };
    MyFeedFilterResultComponent.prototype.initialize = function () {
        if (this.para.Feed_Category_Id == "") {
            this.feedFilterInfo.Feed_Category_Id = null;
        }
        else {
            this.feedFilterInfo.Feed_Category_Id = this.para.Feed_Category_Id;
        }
        if (this.para.FeedType_Id == "") {
            this.feedFilterInfo.FeedType_Id = null;
        }
        else {
            this.feedFilterInfo.FeedType_Id = this.para.FeedType_Id;
        }
        this.feedFilterInfo.Title = null;
        this.feedFilterInfo.SearchKeyword = this.para.SearchKeyword;
        this.feedFilterInfo.Posted_Date_From = this.para.Posted_Date_From;
        this.feedFilterInfo.Posted_Date_To = this.para.Posted_Date_To;
        this.feedFilterInfo.Created_From = this.para.Created_From;
        this.feedFilterInfo.Created_To = this.para.Created_To;
        this.feedFilterInfo.Cursor_Index = null;
        this.feedFilterInfo.Get_Next = false;
        this.feedFilterInfo.Page_Size = 10;
        this.feedFilterInfo.Post_Status = this.para.Post_Status;
        this.feedFilterInfo.UnPost_Status = this.para.UnPost_Status;
        this.feedFilterInfo.isBlocked = this.para.isBlocked;
    };
    MyFeedFilterResultComponent.prototype.loadFeedList = function () {
        var _this = this;
        this.busy = this.feedService.getNewsfeedlist(this.feedFilterInfo.Feed_Category_Id, this.feedFilterInfo.FeedType_Id, this.feedFilterInfo.Title, this.feedFilterInfo.SearchKeyword, this.feedFilterInfo.Posted_Date_From, this.feedFilterInfo.Posted_Date_To, this.feedFilterInfo.Created_From, this.feedFilterInfo.Created_To, this.feedFilterInfo.Cursor_Index, this.feedFilterInfo.Get_Next, this.feedFilterInfo.Page_Size, this.feedFilterInfo.Post_Status, this.feedFilterInfo.UnPost_Status, this.feedFilterInfo.isBlocked)
            .subscribe(function (res) {
            _this.isLoading = false;
            var feedList = Array();
            res.result.forEach(function (feed) {
                feedList.push(feed);
            });
            _this.newsFeedList.push(feedList);
            console.log("loadFeedList --> " + JSON.stringify(res));
        });
    };
    MyFeedFilterResultComponent.prototype.onLoadMoreItemsRequested = function (args) {
        var that = new WeakRef(this);
        var listView = args.object;
        var arrLength = that.get().newsFeedList.length;
        Timer.setTimeout(function () {
            that.get().loadMoreFeeds();
            listView.notifyLoadOnDemandFinished();
        }, 1000);
        //}
        args.returnValue = true;
    };
    MyFeedFilterResultComponent.prototype.onItemTap = function (args) {
        var selectedIndex = args.index;
        var feed = this.newsFeedList.getItem(selectedIndex);
        var navigationExtras = {
            queryParams: {
                "CallerClass": "MyFeedFilterResultComponent",
                "SelectedPosition": selectedIndex,
            }
        };
        this.router.navigate(["/myfeed/" + feed.Feed_Id + "/view"], navigationExtras); //route to feed_detail(1)
    };
    MyFeedFilterResultComponent.prototype.loadMoreFeeds = function () {
        if (this.newsFeedList.length > 0) {
            this.feedFilterInfo.Cursor_Index = this.newsFeedList.getItem(this.newsFeedList.length - 1).Feed_Id;
            this.feedFilterInfo.Get_Next = false;
        }
        this.loadFeedList();
    };
    MyFeedFilterResultComponent.prototype.getInnerHtml = function (desc) {
        var dot = '';
        var rtn = desc.replace(/<\/?[^>]+>/ig, " ");
        rtn = rtn.replace("\n", "");
        rtn = rtn.replace("&nbsp;", "");
        if (rtn.length > 100) {
            dot = '.....';
        }
        rtn = rtn.substring(0, 100);
        if (rtn.length > 0) {
            return rtn + dot;
        }
        else {
            return '';
        }
    };
    MyFeedFilterResultComponent.prototype.updateMyFeedsUI = function (feed, isFeedUpdateOrCreate, position) {
        var _this = this;
        console.log("feed " + JSON.stringify(feed));
        console.log("update my feedList " + isFeedUpdateOrCreate + " position " + position);
        if (isFeedUpdateOrCreate == "new") {
            this.newsFeedList.unshift(feed);
            this.radListView.refresh();
            //alert("Feed successfully created!");
        }
        else if (isFeedUpdateOrCreate == "update") {
            //this.newsFeedList.splice(position, 1);// 1, 1
            //this.newsFeedList.splice(position,0,feed);//1,feed
            //this.newsFeedList.notify;
            this.newsFeedList.getItem(position).Feed_Category_Id = feed.Feed_Category_Id;
            this.newsFeedList.getItem(position).Feed_Category_Name = feed.Feed_Category_Name;
            this.newsFeedList.getItem(position).FeedType_Id = feed.FeedType_Id;
            this.newsFeedList.getItem(position).Feed_Type_Name = feed.Feed_Type_Name;
            this.newsFeedList.getItem(position).Title = feed.Title;
            this.newsFeedList.getItem(position).Description = feed.Description;
            this.newsFeedList.getItem(position).Posted_Date = feed.Posted_Date;
            this.newsFeedList.getItem(position).Post_Status = feed.Post_Status;
            this.newsFeedList.getItem(position).Last_Updated_By = feed.Last_Updated_By;
            this.newsFeedList.getItem(position).Last_Updated_On = feed.Last_Updated_On;
            this.newsFeedList.getItem(position).status = feed.status;
            this.newsFeedList.getItem(position).MC_Feed_Files = feed.MC_Feed_Files;
            //alert("Feed successfully updated!");
        }
        else if (isFeedUpdateOrCreate == "ARCHIVE") {
            try {
                console.log("unpost myFeeds");
                setTimeout(function () {
                    var i = _this.newsFeedList.indexOf(_this.newsFeedList.getItem(position));
                    _this.newsFeedList.splice(i, 1);
                    //alert("Feed successfully unposted!");                     
                    console.log("remove " + position);
                }, 2000);
            }
            catch (e) {
                console.log(e);
            }
        }
        else if (isFeedUpdateOrCreate == "NOTIFY") {
            alert("Feeds successfully notified!");
        }
    };
    MyFeedFilterResultComponent.getMyFeedsFilterResultObject = function () {
        return MyFeedFilterResultComponent_1.myFeedFilterResultComponent;
    };
    __decorate([
        core_1.ViewChild("radListView"),
        __metadata("design:type", core_1.ElementRef)
    ], MyFeedFilterResultComponent.prototype, "radListViewRef", void 0);
    MyFeedFilterResultComponent = MyFeedFilterResultComponent_1 = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-myfeedfilterresult',
            templateUrl: 'myfeedfilterresult.html',
        }),
        __metadata("design:paramtypes", [router_1.Router, router_1.ActivatedRoute, data_service_1.DataService, router_2.RouterExtensions, myfeed_service_1.MyFeedService, globalstorage_service_1.GlobalStorageService])
    ], MyFeedFilterResultComponent);
    return MyFeedFilterResultComponent;
    var MyFeedFilterResultComponent_1;
}());
exports.MyFeedFilterResultComponent = MyFeedFilterResultComponent;
//# sourceMappingURL=data:application/json;base64,