"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var myfeed_model_1 = require("../model/myfeed.model");
var myfeed_service_1 = require("../services/myfeed.service");
var nativescript_drop_down_1 = require("nativescript-drop-down");
var interfaces_1 = require("../../shared/interfaces");
var common_1 = require("@angular/common");
//import { DialogService } from '../../shared/utils/dialog.service';
var MyFeedFilterComponent = /** @class */ (function () {
    function MyFeedFilterComponent(router, route, routerExtensions, feedService) {
        this.router = router;
        this.route = route;
        this.routerExtensions = routerExtensions;
        this.feedService = feedService;
        this.dataSourceFeedType = new nativescript_drop_down_1.ValueList();
        this.dataSourceFeedCategory = new nativescript_drop_down_1.ValueList();
        this.feedFilterInfo = new myfeed_model_1.FeedFilter();
        this.isLoading = false;
    }
    MyFeedFilterComponent_1 = MyFeedFilterComponent;
    MyFeedFilterComponent.prototype.ngOnInit = function () {
        this.searchKeyword = "";
        this.initialize();
        this.init();
    };
    MyFeedFilterComponent.prototype.initialize = function () {
        this.feedFilterInfo.Feed_Category_Id = null;
        this.feedFilterInfo.FeedType_Id = null;
        this.feedFilterInfo.Title = null;
        this.feedFilterInfo.SearchKeyword = null;
        this.feedFilterInfo.Posted_Date_From = null;
        this.feedFilterInfo.Posted_Date_To = null;
        this.feedFilterInfo.Created_From = null;
        this.feedFilterInfo.Created_To = null;
        this.feedFilterInfo.Cursor_Index = null;
        this.feedFilterInfo.Get_Next = false;
        this.feedFilterInfo.Page_Size = 10;
        this.feedFilterInfo.Post_Status = true;
        this.feedFilterInfo.UnPost_Status = false;
        this.feedFilterInfo.isBlocked = false;
    };
    MyFeedFilterComponent.prototype.init = function () {
        //this.feedInfoDetail = new FeedInformation();
        //this.feedInfoDetail.Feed_Group = 1;
        //this.feedInfoDetail.Feed_Id = this.feedId;
        //this.feedInfoDetail = this.route.snapshot.params['id'];
        var _this = this;
        this.isLoading = true;
        this.feedService.getfeedType()
            .subscribe(function (res) {
            console.log("getFeedType -> " + JSON.stringify(res));
            _this.feedType = res.result;
            try {
                var dropDownValuePair;
                dropDownValuePair = new interfaces_1.DropDownValuePair();
                dropDownValuePair.value = "0";
                dropDownValuePair.display = "ALL";
                _this.dataSourceFeedType.push(dropDownValuePair);
                _this.feedType.map(function (v) {
                    dropDownValuePair = new interfaces_1.DropDownValuePair();
                    dropDownValuePair.value = v.FeedType_Id;
                    dropDownValuePair.display = v.FeedType_Name;
                    _this.dataSourceFeedType.push(dropDownValuePair);
                    //this.arrFeedType.push(v.FeedType_Name)
                });
                _this.dropDownFeedType.items = _this.dataSourceFeedType;
                _this.dropDownFeedType.selectedIndex = 0;
            }
            catch (e) {
                console.log(e);
            }
        });
        this.feedService.getfeedCategory()
            .subscribe(function (res) {
            _this.isLoading = false;
            _this.feedCategory = res.result;
            try {
                var dropDownValuePair;
                dropDownValuePair = new interfaces_1.DropDownValuePair();
                dropDownValuePair.value = "0";
                dropDownValuePair.display = "ALL";
                _this.dataSourceFeedCategory.push(dropDownValuePair);
                _this.feedCategory.map(function (v) {
                    dropDownValuePair = new interfaces_1.DropDownValuePair();
                    dropDownValuePair.value = v.Feed_Category_Id;
                    dropDownValuePair.display = v.Feed_Category_Name;
                    _this.dataSourceFeedCategory.push(dropDownValuePair);
                });
                _this.dropDownFeedCategory.items = _this.dataSourceFeedCategory;
                _this.dropDownFeedCategory.selectedIndex = 0;
            }
            catch (e) {
                console.log(e);
            }
        });
    };
    MyFeedFilterComponent.prototype.ngAfterViewInit = function () {
        this.page = this.pageRef.nativeElement;
        this.dropDownFeedType = this.page.getViewById("dropDownFeedType");
        this.dropDownFeedCategory = this.page.getViewById("dropDownFeedCategory");
        this.chkPost = this.page.getViewById("chkPost");
        this.chkUnpost = this.page.getViewById("chkUnpost");
        this.chkArchive = this.page.getViewById("chkArchive");
    };
    MyFeedFilterComponent.prototype.onNavBtnTap = function () {
        this.routerExtensions.backToPreviousPage();
    };
    MyFeedFilterComponent.prototype.onchangeFeedType = function (args) {
        var selectedValue = this.dataSourceFeedType.getValue(this.dropDownFeedType.selectedIndex);
        if (selectedValue.toString() != "0") {
            MyFeedFilterComponent_1.feedTypeId = selectedValue.toString();
        }
        console.log("selectedValue " + selectedValue);
        console.log("Drop Down selected index changed from " + args.oldIndex + " to " + args.newIndex);
    };
    MyFeedFilterComponent.prototype.onchangeFeedCategory = function (args) {
        var selectedValue = this.dataSourceFeedCategory.getValue(this.dropDownFeedCategory.selectedIndex);
        MyFeedFilterComponent_1.feedCategoryId = selectedValue.toString();
        console.log("selectedValue " + selectedValue);
        console.log("Drop Down selected index changed from " + args.oldIndex + " to " + args.newIndex);
    };
    MyFeedFilterComponent.prototype.onopen = function () {
    };
    MyFeedFilterComponent.prototype.onclose = function () {
    };
    MyFeedFilterComponent.prototype.onSearch = function () {
        this.feedFilterInfo.Feed_Category_Id = MyFeedFilterComponent_1.feedCategoryId;
        this.feedFilterInfo.FeedType_Id = MyFeedFilterComponent_1.feedTypeId;
        this.feedFilterInfo.UnPost_Status = this.chkUnpost.checked;
        this.feedFilterInfo.Post_Status = this.chkPost.checked;
        this.feedFilterInfo.isBlocked = this.chkArchive.checked;
        console.log("feedDetail --> " + JSON.stringify(this.feedFilterInfo));
        var navigationExtras = {
            queryParams: {
                "FeedFilterInfo": JSON.stringify(this.feedFilterInfo),
            }
        };
        this.router.navigate(["/myfeed/fiterresult"], navigationExtras);
    };
    MyFeedFilterComponent.prototype.callDatePicker = function (para) {
        var _this = this;
        var ModalPicker = require("nativescript-modal-datetimepicker").ModalDatetimepicker;
        var picker = new ModalPicker();
        picker.pickDate({
            title: "",
            theme: "light",
            maxDate: new Date(new Date().getFullYear(), 11, 31)
        }).then(function (result) {
            console.log("Date is: " + result.day + "-" + result.month + "-" + result.year);
            var _day = result.day;
            var _month = result.month;
            if (_day.toString().length < 2) {
                _day = "0" + _day;
            }
            if (_month.toString().length < 2) {
                _month = "0" + _month;
            }
            var strDate = new Date(result.year + "-" + _month + "-" + _day + "T00:00:00");
            var datePipe = new common_1.DatePipe("en-US");
            console.log("date 1 => " + strDate);
            var _date = datePipe.transform(strDate, 'dd MMM yyyy');
            console.log("date 2 => " + _date);
            if (para == "postedFrom") {
                _this.feedFilterInfo.Posted_Date_From = strDate;
                _this.postedDateFrom = _date;
            }
            else if (para == "postedTo") {
                _this.feedFilterInfo.Posted_Date_To = strDate;
                _this.postedDateTo = _date;
            }
            else if (para == "createdFrom") {
                _this.feedFilterInfo.Created_From = strDate;
                _this.createdDateFrom = _date;
            }
            else if (para == "createdTo") {
                _this.feedFilterInfo.Created_To = strDate;
                _this.createdDateTo = _date;
            }
        }).catch(function (error) {
            console.log("Error: " + error);
        });
    };
    MyFeedFilterComponent.feedCategoryId = "";
    MyFeedFilterComponent.feedTypeId = "";
    __decorate([
        core_1.ViewChild("page"),
        __metadata("design:type", core_1.ElementRef)
    ], MyFeedFilterComponent.prototype, "pageRef", void 0);
    MyFeedFilterComponent = MyFeedFilterComponent_1 = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-myfeedfilter',
            templateUrl: 'myfeedfilter.html',
            styleUrls: ['./myfeedfilter.component.css']
        }),
        __metadata("design:paramtypes", [router_1.Router, router_1.ActivatedRoute, router_2.RouterExtensions, myfeed_service_1.MyFeedService])
    ], MyFeedFilterComponent);
    return MyFeedFilterComponent;
    var MyFeedFilterComponent_1;
}());
exports.MyFeedFilterComponent = MyFeedFilterComponent;
//# sourceMappingURL=data:application/json;base64,